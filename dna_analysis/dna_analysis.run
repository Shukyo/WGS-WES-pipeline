#!/bin/bash  -e


## Aligning
if [ $startStep = "fastq" ];then
	echo -e  [`date`]\\tStart alignment and sorting...
	if [ $method = "bwa" ];then
		$bwa mem  -t $thread -R "@RG\tID:$sampleName\tSM:$sampleName\tLB:$library"  $bwa_index_base  ${read1}  ${read2} |\
			samtools view -Sb  -   -o ${sampleName}Aligned.sortedByCoord.out.bam    > $PWD/log/${sampleName}_${processDay}_bwaAlign.log 2>&1 \
	 	|| (echo -e "ERROR occurred while aligning, please check $PWD/$PWD/log/${sampleName}_${processDay}_bwaAlign.log\\n";exit -1)
		input=${sampleName}Aligned.sortedByCoord.out.bam
	fi
	echo -e [`date`]\\tFinished alignment
	startStep="sortBam"
fi
allDone fastq

## Sorting and Indexing
if [ $startStep = "sortBam" ];then
	echo -e [`date`]\\tStart sorting and indexing bam file...
	#java -jar $picard SortSam  \
	#	INPUT=$input  \
	#	OUTPUT=$sampleName.sorted.bam  \
	#	SORT_ORDER=coordinate > $PWD/log/$sampleName"_"$processDay"_"sort.log 2>&1 \
	#|| (echo -e "ERROR occurred while sorting bam file, please check $PWD/log/${sampleName}_${processDay}_sort.log\\n";exit -1)

	$gatk SortSam  \
	 --INPUT $input \
	 --OUTPUT $sampleName.sorted.bam  \
	 --SORT_ORDER coordinate \
	 --CREATE_INDEX > $PWD/log/$sampleName"_"$processDay"_"sort.log 2>&1 \
	 || (echo -e "ERROR occurred while sorting bam file, please check $PWD/log/${sampleName}_${processDay}_sort.log\\n";exit -1)

	echo -e [`date`]\\tFinished sorting and indexing
	delFile
	startStep="markDup"
	input=$sampleName.sorted.bam
fi
allDone sortBam

## Mark Duplication
if [ $startStep = "markDup" ];then

	if [ -s $input.bai ]&&[ -s ${input//.bam/.bai} ];then echo -e [`date`]\\tStart indexing bam...
		$samtools index  $sampleName.sorted.bam   > $PWD/log/${sampleName}_${processDay}_index.log 2>&1  \
		|| ( echo -e "ERROR occurred while indexing bam file, please check $PWD/log/${sampleName}_${processDay}_index.log\\n";exit -1)
	fi

	echo -e [`date`]\\tStarting mark duplication...

	#java  -jar $picard MarkDuplicates \
	#	INPUT=$input \
	#	OUTPUT=$sampleName.sorted.dedup.bam \
	#	METRICS_FILE=$sampleName.duplicates \
	#	REMOVE_DUPLICATES=TRUE  \
	#	ASSUME_SORTED=TRUE \
	#	VALIDATION_STRINGENCY=LENIENT \ # deprecated parameter
	#	CREATE_INDEX=TRUE  > $PWD/log/${sampleName}_${processDay}_dedup.log 2>&1 \
	#|| ( echo -e "ERROR occurred while marking duplication, please check $PWD/log/${sampleName}_${processDay}_dedup.log\\n";exit -1)

	$gatk MarkDuplicates \
	  --INPUT $input \
		--OUTPUT $sampleName.sorted.dedup.bam \
		--METRICS_FILE $sampleName.duplicates \
		--CREATE_INDEX > $PWD/log/${sampleName}_${processDay}_dedup.log 2>&1 \
		|| ( echo -e "ERROR occurred while marking duplication, please check $PWD/log/${sampleName}_${processDay}_dedup.log\\n";exit -1)

	echo -e [`date`]\\tFinished mark duplication
	delFile
	startStep="arGrp"
	input=$sampleName.sorted.dedup.bam
fi
allDone markDup

#Adding or Replacing Reads Groups
if [ $startStep = "arGrp" ];then
	echo -e [`date`]\\tStarting add or replace read groups...

	# java  -jar $picard AddOrReplaceReadGroups \
		# INPUT="$input" \
		# OUTPUT="$sampleName.sorted.dedup.rg.bam" \
		# SORT_ORDER=coordinate \
		# RGID=PSY \
		# RGLB="$library" \
		# RGPL="$platform" \
		# RGPU=RUN \
		# RGSM="$sampleName" \
		# RGCN="$corp" \
	# 	VALIDATION_STRINGENCY=SILENT \
	# 	CREATE_INDEX=TRUE  > "$PWD/log/${sampleName}_${processDay}_readgroup.log"  2>&1 \
	# || ( echo -e "ERROR occurred while adding group, please check $PWD/log/${sampleName}_${processDay}_readgroup.log\\n";exit -1)

 $gatk AddOrReplaceReadGroups \
 					--INPUT "$input" \
					--OUTPUT "$sampleName.sorted.dedup.rg.bam" \
					--SORT_ORDER coordinate \
					--RGID PSY \
					--RGLB "$library" \
					--RGPL "$platform" \
					--RGPU RUN \
					--RGSM "$sampleName" \
					--RGCN "$corp" \
					--CREATE_INDEX  > "$PWD/log/${sampleName}_${processDay}_readgroup.log"  2>&1 \
					|| ( echo -e "ERROR occurred while adding group, please check $PWD/log/${sampleName}_${processDay}_readgroup.log\\n";exit -1)

	delFile
	echo -e [`date`]\\tFinished removing duplication
	startStep "reCal"
	input=$sampleName.sorted.dedup.rg.bam
fi
allDone arGrp

### NO need of realignment of indels where "The indel realignment tools have been retired from the best practices; they are unnecessary if you are using an assembly based caller like Mutect2 or HaplotypeCaller. Someone has proposed a port of those tools but we have not yet fully evaluated it."

# # Realigning  < NO realign in GATK4.0 >
# if [ $startStep = "reAlign" ];then
# 	echo -e [`date`]\\tStart getting realignment target...
#  #calculate the intervals
# 	if [ ! -s ${sampleName}.realign.intervals  ];then
# 	java -jar $gatkjar -T RealignerTargetCreator \
# 		-R $reference \
# 		-I $input \
# 		-known $g1000 \
# 		-known $mill \
# 		-o $sampleName.realign.intervals \
# 		-S LENIENT \
# 		-nt $thread \
# 		--filter_reads_with_N_cigar  > $PWD/log/${sampleName}_${processDay}_reTarget.log 2>&1 \
# 	|| ( echo -e "ERROR occurred while realignment target, please check $PWD/log/${sampleName}_${processDay}_reTarget.log\\n";exit -1)
# 	fi
#
# 	echo -e [`date`]\\tFinished finding the realignment targets, starting realignment...
#
#   # realign the indels
# 	if [ ! -s  ${sampleName}.sorted.dedup.realign.bam ];then
# 	java -jar $gatkjar -T IndelRealigner \
# 		-R $reference \
# 		-I $input \
# 		-targetIntervals $sampleName.realign.intervals \
# 		-known $g1000 \
# 		-known $mill \
# 		-o $sampleName.sorted.dedup.realign.bam \
# 		-S LENIENT  \
# 		--filter_reads_with_N_cigar  > $PWD/log/${sampleName}_${processDay}_realign.log 2>&1 \
# 		|| ( echo -e "ERROR occurred while realignment, please check $PWD/log/${sampleName}_${processDay}_realign.log\\n";exit -1)
# 	fi
#
 if [ $startStep = "reCal" ];then

	echo -e [`date`]\\tStarting RBQS...

   if [ ! -s $sampleName.recal_data.table ];then
		# recalibrate the base quality
    $gatk BaseRecalibrator \
      --input $input \
      --reference $reference \
	  	--known-sites $mill \
	  	--known-sites $g1000 \
	  	--known-sites $dbsnp \
      --output $sampleName.recal_data.table  > $PWD/log/${sampleName}_${processDay}_recal.log 2>&1 \
	  	|| ( echo -e "ERROR occurred while recalibrate , please check $PWD/log/${sampleName}_${processDay}_recal.log\\n";exit -1)
		fi
    if [ ! -s $sampleName.sorted.dedup.rg.recal.bam ];then
    $gatk ApplyBQSR \
	     --reference $reference \
	     --input $input \
	     --bqsr-recal-file $sampleName.recal_data.table  \
	     --output $sampleName.sorted.dedup.rg.recal.bam > $PWD/log/${sampleName}_${processDay}_applybqsr.log 2>&1 \
		   || ( echo -e "ERROR occurred while applying BQSR , please check $PWD/log/${sampleName}_${processDay}_applybqsr.log\\n";exit -1)
	  fi

	echo -e [`date`]\\tFinished recalibration bam file
	## should not delete the final BAM files
	#delFile
	startStep="varCall"
	input=$sampleName.sorted.dedup.rg.recal.bam
fi
allDone reCal

# call variants
if [ $startStep = "varCall" ];then
	echo -e [`date`]\\tStart HaplotypeCaller...

	if [ ! -s $sampleName.g.vcf ];then
			$gatk  HaplotypeCaller \
     		--reference $reference \
		 		--input $input \
		 		--output $sampleName.g.vcf  \
		 		-ERC GVCF \
		 		--native-pair-hmm-threads $thread  >${sampleName}_${processDay}_haplotypeCaller.log 2>&1 \
     		|| ( echo -e "ERROR occurred while call variants, please check $PWD/log/${sampleName}_${processDay}_HaplotypeCaller.log\\n";exit -1)
fi

	echo -e [`date`]\\tAnalysis completed, final output: $sampleName.g.vcf
fi
allDone varCall
